#!/usr/bin/env ruby

require "yaml"
require "fileutils"
require 'digest'
require 'parallel'
require 'redis-mutex'
require 'byebug'
require "dotenv"
require 'curb'
require 'shellwords'
require 'zaru'
require 'openai'
require 'redcarpet'
require 'redcarpet/render_strip'

Dotenv.load

RedisClassy.redis = Redis.new

class Loader
  attr_reader :slug

  def initialize(slug)
    @slug = slug
  end

  def with_lock(file_name)
    RedisMutex.with_lock(file_name, block: 1, expire: 600) do
      yield
    end
  end

  def main
    prepare_dirs
    copy_to_music_app
  end

  def shared_tmp
    "tmp"
  end

  def storage_dir
    File.expand_path("storage/#{slug}", __dir__)
  end

  def blink_storage_dir
    File.expand_path("storage/#{slug}/blinklist", __dir__)
  end

  def gpt_storage_path
    File.expand_path("storage/#{slug}/gpt", __dir__)
  end

  def prepare_dirs
    FileUtils.mkdir_p(storage_dir)
    FileUtils.mkdir_p(blink_storage_dir)
    FileUtils.mkdir_p(gpt_storage_path)
  end

  def system(cmd)
    puts "EXECUTING:"
    puts cmd
    res = Kernel.system(%[bash -l -c #{Shellwords.escape(cmd)}])
    unless res
      puts "Failed to execute cmd"
      puts "="*80
      puts cmd
      debugger
      raise "Failed to execute cmd"
    end
  end

  def parallel_map(arr, &callback)
    if ENV["SAFE"]
      arr.map(&callback)
    else
      Parallel.map(arr, in_processes: 10, &callback)
    end
  end


  def final_en_audio_file_name
    File.expand_path("#{slug}-en.m4a", blink_storage_dir)
  end

  def final_vi_audio_file_name
    File.expand_path("#{slug}-vi.mp3", storage_dir)
  end

  def final_vi_text_file_name
    File.expand_path("#{slug}-vi.txt", storage_dir)
  end

  def convert_markdown_to_plain_text(md)
    Redcarpet::Markdown.new(Redcarpet::Render::StripDown).render(md).tap do |content|
      puts "STRIPPED TEXT:"
      puts content
    end
  end

  def copy_to_music_app
    en_path = merge_blink_audio
    vi_path = generate_vi_blink_audio
    system "osascript MusicUpload.scpt Books #{Shellwords.escape(en_path)}"
    system "osascript MusicUpload.scpt Books #{Shellwords.escape(en_path)}"
    system "osascript MusicUpload.scpt Books #{Shellwords.escape(vi_path)}"
    system "osascript MusicUpload.scpt Books #{Shellwords.escape(vi_path)}"
  end

  def merge_blink_audio
    unless File.exist?(final_en_audio_file_name)
      download_blink

      audio_file_names = sort_blink_audio(Dir["#{blink_storage_dir}/#{slug}/*.m4a"])
      source_input_filename = File.expand_path("en_mp4.txt", storage_dir)
      File.write(source_input_filename, audio_file_names.map { |name| "file '#{name}'" }.join("\n"))
      cmd = "ffmpeg -f concat -safe 0 -i '#{source_input_filename}' -c copy '#{final_en_audio_file_name}'"
      system(cmd)
    end

    final_en_audio_file_name
  end

  def download_blink
    unless File.exist?(File.expand_path("#{slug}/book.md", blink_storage_dir))
      Dir.chdir(File.expand_path("blinkist", __dir__)) do
        system "./main.py --book-slug #{slug} #{blink_storage_dir}"
      end
    end
  end

  def sort_blink_audio(files)
    files.sort_by { |name| File.basename(name, File.extname(name)).split("_").last.to_i }
  end

  def generate_vi_blink_audio
    unless File.exist?(final_vi_audio_file_name)
      download_blink
      translate_blink_to_vi
      cmd = "cat #{Shellwords.escape(final_vi_text_file_name)} | tts #{Shellwords.escape(final_vi_audio_file_name)} #{LOCALE2TTSPARAMS['vi']}"
      system cmd
    end

    final_vi_audio_file_name
  end

  def translated_text_vi_file_name
    "#{storage_dir}/#{slug}-vi.txt"
  end

  def openai_client
    @openai_client ||= OpenAI::Client.new(access_token: ENV["OPENAI_API_KEY"])
  end

  def normalized_en_content
    text_en_file_name = blink_storage_dir + "/#{slug}/book.md"
    convert_markdown_to_plain_text(File.read(text_en_file_name).gsub("## Blink", "## Chapter"))
  end

  def normalized_en_content_segments
    content = normalized_en_content
    segments = []
    max_segment_size = 1000
    while content.length > max_segment_size
      counter = max_segment_size
      while content[counter] != "\n" && counter > 0
        counter -= 1
        print "\r"
        print counter
        print "  "
      end

      if counter == 0
        segments << content
        content = ""
      else
        segments << content[0..counter-1]
        content = content[counter+1..-1]
      end
    end

    segments << content
  end

  def translate_blink_to_vi
    unless File.exist?(final_vi_text_file_name)
      segments = normalized_en_content_segments
      translated_segments = parallel_map(segments.each_with_index) do |(segment, index)|
        puts "TRANSLATING #{index + 1}/#{segments.count}:"
        puts segment
        prompt = "Translate this text from English to Vietnamese, remove all tagging, add period at the end of each sentence: \n#{segment}"
        response = openai_client.chat(
          parameters: {
            model: "gpt-3.5-turbo", # Required.
            messages: [{ role: "user", content: prompt}], # Required.
            temperature: 0.7,
          }
        )
        response.dig("choices", 0, "message", "content").tap do |content|
          puts "OUTPUT:"
          puts content
        end
      end

      File.write(final_vi_text_file_name, translated_segments.join("\n"))
    end
  end

  def reencode_mp3(original_mp3_filename)
    ts_filename = convert_to_ts(original_mp3_filename)
    file_name = ts_filename + ".rencoded.mp3"
    unless File.exist?(file_name)
      with_lock(file_name) do
        cmd = %{ffmpeg -i '#{ts_filename}' -ac 2 '#{file_name}' }
        cmd = %{ffmpeg \
          -i '#{ts_filename}' \
          -filter:a 'volume=0.5' \
          -ar 44100 -ac 2 '#{file_name}'
        }

        puts cmd
        system cmd
      end
    end

    file_name
  end

  LOCALE2TTSPARAMS = {
    "vi" => "--language vi-VN --service gcp --voice vi-VN-Wavenet-D ",
    "en" => "--language en-US --service gcp --voice en-US-Neural2-A "
  }

end

require 'google_custom_search_api'
require 'open-uri'

GoogleCustomSearchApi::GOOGLE_API_KEY = ENV["GOOGLE_API_KEY"]
GoogleCustomSearchApi::GOOGLE_SEARCH_CX = ENV["GOOGLE_SEARCH_CX"]

class GoogleImageDownloader
  def initialize(query:, destination_path:)
    @query = query
    @destination_path = destination_path
  end

  def search_items
    GoogleCustomSearchApi.search(@query, searchType: 'image', num: 10)['items']
  end

  def get_first_image_url(search_results)
    items = search_results['items']
    return nil if items.empty?

    items.first['link']
  end

  def perform_download
    search_items.each do |item|
      image_url = item['link']
      begin
        puts "Downloading #{image_url}..."
        open(@destination_path, 'wb') do |file|
          file << URI.open(image_url).read
        end
        break
      rescue (OpenURI::HTTPError)
        puts "Error, try next file"
        FileUtils.rm_f(@destination_path)
      end
    end
  end
end

Loader.new(ARGV[0]).main
